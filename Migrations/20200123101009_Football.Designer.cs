// <auto-generated />
using System;
using December_24_2019_Football.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace December_24_2019_Football.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200123101009_Football")]
    partial class Football
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("December_24_2019_Football.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Carts");

                    b.HasData(
                        new { Id = 1, Image = "Cart/red.png", Name = "Red" },
                        new { Id = 2, Image = "Cart/yellow.png", Name = "Yellow" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "Mexico" },
                        new { Id = 2, Name = "Brazil" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<int>("FootballPlayerId");

                    b.Property<int>("GameTimeId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("FootballPlayerId");

                    b.HasIndex("GameTimeId");

                    b.ToTable("FootballCarts");

                    b.HasData(
                        new { Id = 1, CartId = 1, FootballPlayerId = 1, GameTimeId = 1 },
                        new { Id = 2, CartId = 1, FootballPlayerId = 3, GameTimeId = 1 },
                        new { Id = 3, CartId = 1, FootballPlayerId = 5, GameTimeId = 1 },
                        new { Id = 4, CartId = 1, FootballPlayerId = 7, GameTimeId = 1 }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FootballerPositions");

                    b.HasData(
                        new { Id = 1, Name = "1" },
                        new { Id = 2, Name = "2" },
                        new { Id = 3, Name = "3" },
                        new { Id = 4, Name = "4" },
                        new { Id = 5, Name = "5" },
                        new { Id = 6, Name = "6" },
                        new { Id = 7, Name = "7" },
                        new { Id = 8, Name = "8" },
                        new { Id = 9, Name = "9" },
                        new { Id = 10, Name = "10" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Image");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50);

                    b.Property<int>("PositionId");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("FootballPlayers");

                    b.HasData(
                        new { Id = 1, Age = 25, Firstname = "Robben", Image = "FootballPlayer/1.png", Lastname = "Robben", PositionId = 1, TeamId = 1 },
                        new { Id = 2, Age = 27, Firstname = "Pizarro", Image = "FootballPlayer/2.jpg", Lastname = "Pizarro", PositionId = 2, TeamId = 1 },
                        new { Id = 3, Age = 32, Firstname = "Martinez", Image = "FootballPlayer/3.jpg", Lastname = "Martinez", PositionId = 3, TeamId = 1 },
                        new { Id = 4, Age = 28, Firstname = "Schweinsteiger", Image = "FootballPlayer/4.jpg", Lastname = "Schweinsteiger", PositionId = 1, TeamId = 1 },
                        new { Id = 5, Age = 31, Firstname = "Rilbery", Image = "FootballPlayer/5.jpg", Lastname = "Rilbery", PositionId = 5, TeamId = 1 },
                        new { Id = 6, Age = 26, Firstname = "Alaba", Image = "FootballPlayer/6.jpg", Lastname = "Alaba", PositionId = 6, TeamId = 1 },
                        new { Id = 7, Age = 29, Firstname = "Lahm", Image = "FootballPlayer/7.jpg", Lastname = "Lahm", PositionId = 7, TeamId = 1 },
                        new { Id = 8, Age = 33, Firstname = "Dante", Image = "FootballPlayer/8.jpg", Lastname = "Dante", PositionId = 8, TeamId = 1 },
                        new { Id = 9, Age = 25, Firstname = "Benatia", Image = "FootballPlayer/9.jpg", Lastname = "Benatia", PositionId = 1, TeamId = 1 },
                        new { Id = 10, Age = 27, Firstname = "Neuer", Image = "FootballPlayer/10.jpg", Lastname = "Neuer", PositionId = 2, TeamId = 1 },
                        new { Id = 11, Age = 32, Firstname = "Bale", Image = "FootballPlayer/11.jpg", Lastname = "Bale", PositionId = 3, TeamId = 2 },
                        new { Id = 12, Age = 28, Firstname = "Benzema", Image = "FootballPlayer/12.jpg", Lastname = "Benzema", PositionId = 4, TeamId = 2 },
                        new { Id = 13, Age = 31, Firstname = "Kroos", Image = "FootballPlayer/13.jpg", Lastname = "Kroos", PositionId = 5, TeamId = 2 },
                        new { Id = 14, Age = 26, Firstname = "Silva", Image = "FootballPlayer/14.jpg", Lastname = "Silva", PositionId = 6, TeamId = 2 },
                        new { Id = 15, Age = 29, Firstname = "Carvajal", Image = "FootballPlayer/15.jpg", Lastname = "Carvajal", PositionId = 7, TeamId = 2 },
                        new { Id = 16, Age = 33, Firstname = "Modric", Image = "FootballPlayer/16.jpg", Lastname = "Modric", PositionId = 8, TeamId = 2 },
                        new { Id = 17, Age = 31, Firstname = "Nacho", Image = "FootballPlayer/17.jpg", Lastname = "Nacho", PositionId = 5, TeamId = 2 },
                        new { Id = 18, Age = 26, Firstname = "Pepe", Image = "FootballPlayer/18.jpg", Lastname = "Pepe", PositionId = 6, TeamId = 2 },
                        new { Id = 19, Age = 29, Firstname = "Ramos", Image = "FootballPlayer/19.jpg", Lastname = "Ramos", PositionId = 7, TeamId = 2 },
                        new { Id = 20, Age = 33, Firstname = "Casillas", Image = "FootballPlayer/20.jpg", Lastname = "Casillas", PositionId = 8, TeamId = 2 }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballPlayerGameTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FootballPlayerId");

                    b.Property<int>("FootballerPositionId");

                    b.Property<int>("GameTimeId");

                    b.HasKey("Id");

                    b.HasIndex("FootballPlayerId");

                    b.HasIndex("FootballerPositionId");

                    b.HasIndex("GameTimeId");

                    b.ToTable("FootballPlayerGameTimes");

                    b.HasData(
                        new { Id = 1, FootballPlayerId = 1, FootballerPositionId = 1, GameTimeId = 1 },
                        new { Id = 2, FootballPlayerId = 2, FootballerPositionId = 2, GameTimeId = 1 },
                        new { Id = 3, FootballPlayerId = 3, FootballerPositionId = 3, GameTimeId = 1 },
                        new { Id = 4, FootballPlayerId = 4, FootballerPositionId = 4, GameTimeId = 1 },
                        new { Id = 5, FootballPlayerId = 5, FootballerPositionId = 5, GameTimeId = 1 },
                        new { Id = 6, FootballPlayerId = 6, FootballerPositionId = 6, GameTimeId = 1 },
                        new { Id = 7, FootballPlayerId = 7, FootballerPositionId = 7, GameTimeId = 1 },
                        new { Id = 8, FootballPlayerId = 8, FootballerPositionId = 8, GameTimeId = 1 },
                        new { Id = 9, FootballPlayerId = 9, FootballerPositionId = 9, GameTimeId = 1 },
                        new { Id = 10, FootballPlayerId = 10, FootballerPositionId = 10, GameTimeId = 1 },
                        new { Id = 11, FootballPlayerId = 11, FootballerPositionId = 1, GameTimeId = 1 },
                        new { Id = 12, FootballPlayerId = 12, FootballerPositionId = 2, GameTimeId = 1 },
                        new { Id = 13, FootballPlayerId = 13, FootballerPositionId = 3, GameTimeId = 1 },
                        new { Id = 14, FootballPlayerId = 14, FootballerPositionId = 4, GameTimeId = 1 },
                        new { Id = 15, FootballPlayerId = 15, FootballerPositionId = 5, GameTimeId = 1 },
                        new { Id = 16, FootballPlayerId = 16, FootballerPositionId = 6, GameTimeId = 1 },
                        new { Id = 17, FootballPlayerId = 17, FootballerPositionId = 7, GameTimeId = 1 },
                        new { Id = 18, FootballPlayerId = 18, FootballerPositionId = 8, GameTimeId = 1 },
                        new { Id = 19, FootballPlayerId = 19, FootballerPositionId = 9, GameTimeId = 1 },
                        new { Id = 20, FootballPlayerId = 20, FootballerPositionId = 10, GameTimeId = 1 }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.GameTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color1");

                    b.Property<string>("Color2");

                    b.Property<DateTime>("Date");

                    b.Property<int>("PositionType1Id");

                    b.Property<int>("PositionType2Id");

                    b.Property<int>("StadiumId");

                    b.Property<int>("Team1Id");

                    b.Property<int>("Team2Id");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("GameTimes");

                    b.HasData(
                        new { Id = 1, Date = new DateTime(2019, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), PositionType1Id = 1, PositionType2Id = 2, StadiumId = 1, Team1Id = 1, Team2Id = 2 }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new { Id = 1, Name = "Goalkeeper" },
                        new { Id = 2, Name = "Full-backs" },
                        new { Id = 3, Name = "Centre-Backs" },
                        new { Id = 4, Name = "Sweeper" },
                        new { Id = 5, Name = "Central Midfield" },
                        new { Id = 6, Name = "Wide Midfield" },
                        new { Id = 7, Name = "Striker" },
                        new { Id = 8, Name = "Behind the Striker" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.PositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PositionTypes");

                    b.HasData(
                        new { Id = 1, Name = "3-4-3" },
                        new { Id = 2, Name = "4-2-4" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");

                    b.HasData(
                        new { Id = 1, Address = "‎1 Scarlet Knight Way", Image = "Stadium/1.png", Name = "Infinity Ring" },
                        new { Id = 2, Address = "Jake Nevin Field House", Image = "Stadium/2.jfif", Name = "Paragon Field" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Teams");

                    b.HasData(
                        new { Id = 1, CountryId = 1, Name = "Real madrid" },
                        new { Id = 2, CountryId = 2, Name = "SV werder bremen" }
                    );
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FootballPlayerId");

                    b.Property<int>("NewTeamId");

                    b.Property<int>("OldTeamId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("FootballPlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballCart", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.Cart", "Cart")
                        .WithMany("FootballCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.FootballPlayer", "FootballPlayer")
                        .WithMany("FootballCarts")
                        .HasForeignKey("FootballPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.GameTime", "GameTime")
                        .WithMany("FootballCarts")
                        .HasForeignKey("GameTimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballPlayer", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.Position", "Position")
                        .WithMany("FootballPlayers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.Team", "Team")
                        .WithMany("FootballPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("December_24_2019_Football.Models.FootballPlayerGameTime", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.FootballPlayer", "FootballPlayer")
                        .WithMany("FootballPlayerGameTimes")
                        .HasForeignKey("FootballPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.FootballerPosition", "FootballerPosition")
                        .WithMany("FootballPlayerGameTimes")
                        .HasForeignKey("FootballerPositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.GameTime", "GameTime")
                        .WithMany("FootballPlayerGameTimes")
                        .HasForeignKey("GameTimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("December_24_2019_Football.Models.GameTime", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.Stadium", "Stadium")
                        .WithMany("GameTimes")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Team", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.Country", "Country")
                        .WithMany("Teams")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("December_24_2019_Football.Models.Transfer", b =>
                {
                    b.HasOne("December_24_2019_Football.Models.FootballPlayer", "FootballPlayer")
                        .WithMany("Transfers")
                        .HasForeignKey("FootballPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("December_24_2019_Football.Models.Team")
                        .WithMany("Transfers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
